from fastapi import APIRouter, UploadFile, File, HTTPException, Depends
from fastapi.responses import JSONResponse
from typing import Optional, Dict, List, Any
import os
import tempfile
import shutil
import json
import requests
from pydub import AudioSegment
from dotenv import load_dotenv
import base64
import io

load_dotenv()  # Th√™m d√≤ng n√†y

# T·∫°o router thay v√¨ Flask app
router = APIRouter()

# Bi·∫øn to√†n c·ª•c ƒë·ªÉ l∆∞u socket_manager
socket_manager = None

def setup_socket_handlers(socket_mgr):
    """Thi·∫øt l·∫≠p socket_manager t·ª´ main.py"""
    global socket_manager
    socket_manager = socket_mgr

# C·∫•u h√¨nh c√°c AI provider mi·ªÖn ph√≠
FREE_PROVIDERS = {
    "groq": {
        "name": "Groq (Mi·ªÖn ph√≠ v·ªõi Whisper + Llama)",
        "whisper_url": "https://api.groq.com/openai/v1/audio/transcriptions",
        "chat_url": "https://api.groq.com/openai/v1/chat/completions",
        "api_key_env": "GROQ_API_KEY",
        "whisper_model": "whisper-large-v3",
        "chat_model": "llama3-70b-8192"
    },
    "huggingface": {
        "name": "Hugging Face (Mi·ªÖn ph√≠)",
        "whisper_url": "https://api-inference.huggingface.co/models/openai/whisper-large-v3",
        "chat_url": "https://api-inference.huggingface.co/models/mistralai/Mistral-7B-Instruct-v0.3",  # Model m·ªõi
        "api_key_env": "HUGGINGFACE_API_KEY",
        "whisper_model": "whisper-large-v3",
        "chat_model": "mistralai/Mistral-7B-Instruct-v0.3"  # Model chat ph√π h·ª£p
    },
    "together": {
        "name": "Together AI ($5 credit mi·ªÖn ph√≠)",
        "whisper_url": "https://api.together.xyz/v1/audio/transcriptions", 
        "chat_url": "https://api.together.xyz/v1/chat/completions",
        "api_key_env": "TOGETHER_API_KEY",
        "whisper_model": "whisper-large-v3",
        "chat_model": "meta-llama/Llama-2-70b-chat-hf"
    },
    "deepseek": {
        "name": "DeepSeek (R·∫•t r·∫ª, ~mi·ªÖn ph√≠)",
        "chat_url": "https://api.deepseek.com/v1/chat/completions",
        "api_key_env": "DEEPSEEK_API_KEY",
        "chat_model": "deepseek-chat"
    }
}

PRIORITY = ["groq", "huggingface", "together", "deepseek"]  # Th·ª© t·ª± ∆∞u ti√™n m·ªõi

# S·ª≠a ph·∫ßn ch·ªçn provider th√†nh:
selected_provider = None
for provider_name in PRIORITY:
    config = FREE_PROVIDERS.get(provider_name)
    if not config:
        continue  # B·ªè qua n·∫øu provider kh√¥ng t·ªìn t·∫°i
    
    api_key = os.getenv(config["api_key_env"])
    if api_key:
        selected_provider = provider_name
        print(f"‚úÖ S·ª≠ d·ª•ng {config['name']}")
        break

if not selected_provider:
    print("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y API key n√†o, ch·∫°y trong ch·∫ø ƒë·ªô LOCAL")

def convert_audio_to_wav(input_path, output_path):
    """Chuy·ªÉn ƒë·ªïi audio sang format WAV"""
    try:
        audio = AudioSegment.from_file(input_path)
        audio = audio.set_frame_rate(16000)
        audio = audio.set_channels(1)
        audio = audio.set_sample_width(2)
        audio.export(output_path, format="wav")
        return True
    except Exception as e:
        print(f"L·ªói chuy·ªÉn ƒë·ªïi audio: {e}")
        return False

def validate_audio_file(file_path):
    """Ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa file audio"""
    if not os.path.exists(file_path):
        return False, "File kh√¥ng t·ªìn t·∫°i"
    
    file_size = os.path.getsize(file_path)
    if file_size == 0:
        return False, "File audio r·ªóng"
    
    if file_size < 1024:
        return False, "File audio qu√° nh·ªè"
    
    try:
        audio = AudioSegment.from_file(file_path)
        duration = len(audio) / 1000.0
        
        if duration < 0.5:
            return False, "Audio qu√° ng·∫Øn ƒë·ªÉ ph√¢n t√≠ch"
        
        if duration > 600:
            return False, "Audio qu√° d√†i (t·ªëi ƒëa 10 ph√∫t)"
            
        return True, f"Audio h·ª£p l·ªá - Th·ªùi l∆∞·ª£ng: {duration:.2f}s"
        
    except Exception as e:
        return False, f"Kh√¥ng th·ªÉ ƒë·ªçc file audio: {str(e)}"

def transcribe_with_groq(audio_path, api_key):
    """Chuy·ªÉn ƒë·ªïi audio sang text b·∫±ng Groq Whisper"""
    try:
        url = FREE_PROVIDERS["groq"]["whisper_url"]
        headers = {"Authorization": f"Bearer {api_key}"}
        with open(audio_path, "rb") as f:
            files = {"file": f}
            data = {
                "model": FREE_PROVIDERS["groq"]["whisper_model"],
                "language": "ja"
            }
            
            response = requests.post(url, headers=headers, files=files, data=data)
            
        if response.status_code == 200:
            result = response.json()
            return result.get("text", "")
        else:
            print(f"Groq Whisper Error: {response.status_code} - {response.text}")
            return None
            
    except Exception as e:
        print(f"L·ªói Groq transcription: {e}")
        return None

def transcribe_with_huggingface(audio_path, api_key):
    """Chuy·ªÉn ƒë·ªïi audio sang text b·∫±ng Hugging Face Whisper (MI·ªÑN PH√ç)"""
    try:
        url = FREE_PROVIDERS["huggingface"]["whisper_url"]
        headers = {
            "Authorization": f"Bearer {api_key}",
            "Content-Type": "audio/webm"  # Th√™m Content-Type ph√π h·ª£p
        }
        
        with open(audio_path, "rb") as f:
            audio_bytes = f.read()
            
        response = requests.post(url, headers=headers, data=audio_bytes)
        
        if response.status_code == 200:
            result = response.json()
            if isinstance(result, dict) and "text" in result:
                return result["text"]
            elif isinstance(result, list) and len(result) > 0:
                return result[0].get("text", "")
        else:
            print(f"HuggingFace Whisper Error: {response.status_code} - {response.text}")
            return None
            
    except Exception as e:
        print(f"L·ªói HuggingFace transcription: {e}")
        return None

def analyze_with_groq(transcript, api_key):
    """Ph√¢n t√≠ch b·∫±ng Groq Llama (MI·ªÑN PH√ç)"""
    try:
        url = FREE_PROVIDERS["groq"]["chat_url"]
        headers = {
            "Authorization": f"Bearer {api_key}",
            "Content-Type": "application/json"
        }

        data = {
            "model": FREE_PROVIDERS["groq"]["chat_model"],
            "messages": [
                {
                    "role": "system",
                    "content": """B·∫°n l√† tr·ª£ l√Ω gi√°o vi√™n ti·∫øng Nh·∫≠t. H√£y ph√¢n t√≠ch cu·ªôc h·ªôi tho·∫°i theo c√°c ti√™u ch√≠:

üå∏ T·ªîNG QUAN:
- Ch·ªß ƒë·ªÅ h·ªôi tho·∫°i: [X√°c ƒë·ªãnh ch·ªß ƒë·ªÅ]
- M·ª©c ƒë·ªô ph√π h·ª£p: [ƒê√°nh gi√° theo tr√¨nh ƒë·ªô h·ªçc vi√™n]

üìñ PH√ÇN T√çCH CHI TI·∫æT:
1. T·ª´ v·ª±ng:
   - T·ª´ m·ªõi xu·∫•t hi·ªán: [Li·ªát k√™]
   - L·ªói d√πng t·ª´: [Ghi r√µ t·ª´ sai v√† g·ª£i √Ω t·ª´ ƒë√∫ng]

2. Ng·ªØ ph√°p:
   - C·∫•u tr√∫c ƒë√£ s·ª≠ d·ª•ng: [Li·ªát k√™]
   - L·ªói ng·ªØ ph√°p: [Ch·ªâ ra l·ªói v√† c√°ch s·ª≠a]

3. Ph√°t √¢m:
   - T·ª´ ph√°t √¢m kh√≥: [Danh s√°ch t·ª´ c·∫ßn luy·ªán t·∫≠p]
   - G·ª£i √Ω luy·ªán ph√°t √¢m: [Ph∆∞∆°ng ph√°p c·ª• th·ªÉ]

4. Giao ti·∫øp:
   - ƒê·ªô tr√¥i ch·∫£y: /10
   - T·ª± nhi√™n trong h·ªôi tho·∫°i: /10

üí° G·ª¢I √ù C·∫¢I THI·ªÜN:
- B√†i h·ªçc n√™n √¥n t·∫≠p: [Li·ªát k√™]
- T√†i li·ªáu tham kh·∫£o: [S√°ch/Website ph√π h·ª£p]"""
                },
                {
                    "role": "user",
                    "content": f"Ph√¢n t√≠ch transcript cu·ªôc h·ªçp:\n\n{transcript}"
                }
            ],
            "temperature": 0.7,
            "max_tokens": 1024
        }

        response = requests.post(url, headers=headers, json=data)

        if response.status_code == 200:
            result = response.json()
            return result["choices"][0]["message"]["content"]
        else:
            print(f"Groq Chat Error: {response.status_code} - {response.text}")
            return None

    except Exception as e:
        print(f"L·ªói Groq analysis: {e}")
        return None


def analyze_with_huggingface(transcript, api_key):
    try:
        url = FREE_PROVIDERS["huggingface"]["chat_url"]
        headers = {"Authorization": f"Bearer {api_key}"}
        
        payload = {
            "inputs": f"""<s>[INST] B·∫°n l√† tr·ª£ l√Ω gi√°o vi√™n ti·∫øng Nh·∫≠t. H√£y ph√¢n t√≠ch transcript sau:
            {transcript}
            Theo c√°c ti√™u ch√≠: T·ª´ v·ª±ng, Ng·ªØ ph√°p, Ph√°t √¢m. Ph·∫£n h·ªìi b·∫±ng ti·∫øng Vi·ªát. [/INST]"""
        }
        
        response = requests.post(url, headers=headers, json=payload)
        
        if response.status_code == 200:
            return response.json()[0]["generated_text"]
        else:
            print(f"HuggingFace Chat Error: {response.status_code} - {response.text}")
            return None
            
    except Exception as e:
        print(f"L·ªói HuggingFace analysis: {e}")
        return None

def analyze_with_deepseek(transcript, api_key):
    """Ph√¢n t√≠ch b·∫±ng DeepSeek (R·∫•t r·∫ª)"""
    try:
        url = FREE_PROVIDERS["deepseek"]["chat_url"]
        headers = {
            "Authorization": f"Bearer {api_key}",
            "Content-Type": "application/json"
        }
        
        data = {
            "model": FREE_PROVIDERS["deepseek"]["chat_model"],
            "messages": [
                {
                    "role": "system",
                    "content": """B·∫°n l√† AI chuy√™n ph√¢n t√≠ch cu·ªôc h·ªçp. Ph·∫£n h·ªìi b·∫±ng ti·∫øng Vi·ªát v·ªõi format:

üìã T√ìM T·∫ÆT CU·ªòC H·ªåP:
[T√≥m t·∫Øt ch√≠nh c·ªßa cu·ªôc h·ªçp]

üéØ C√ÅC ƒêI·ªÇM CH√çNH:
[Li·ªát k√™ c√°c ƒëi·ªÉm quan tr·ªçng]

üìå QUY·∫æT ƒê·ªäNH/H√ÄNH ƒê·ªòNG:
[C√°c quy·∫øt ƒë·ªãnh ƒë∆∞·ª£c ƒë∆∞a ra]

üë• TH√îNG TIN TH√äM:
[Th√¥ng tin b·ªï sung n·∫øu c√≥]"""
                },
                {
                    "role": "user", 
                    "content": f"H√£y ph√¢n t√≠ch transcript cu·ªôc h·ªçp sau:\n\n{transcript}"
                }
            ],
            "temperature": 0.7,
            "max_tokens": 1000
        }
        
        response = requests.post(url, headers=headers, json=data)
        
        if response.status_code == 200:
            result = response.json()
            return result["choices"][0]["message"]["content"]
        else:
            print(f"DeepSeek Error: {response.status_code} - {response.text}")
            return None
            
    except Exception as e:
        print(f"L·ªói DeepSeek analysis: {e}")
        return None

@router.post('/analyze')
async def analyze_audio(audio: UploadFile = File(...)):
    temp_dir = None
    try:
        print(f"üéµ Nh·∫≠n request ph√¢n t√≠ch audio - Provider: {selected_provider or 'LOCAL'}")
        
        if not audio:
            raise HTTPException(status_code=400, detail="Kh√¥ng t√¨m th·∫•y file audio")
            
        print(f"üìÅ File: {audio.filename}, Type: {audio.content_type}")
        
        if not audio.filename:
            raise HTTPException(status_code=400, detail="T√™n file audio r·ªóng")
        
        # T·∫°o th∆∞ m·ª•c t·∫°m v√† l∆∞u file
        temp_dir = tempfile.mkdtemp()
        original_path = os.path.join(temp_dir, f"original_{audio.filename}")
        
        # L∆∞u file t·ª´ FastAPI UploadFile
        with open(original_path, "wb") as buffer:
            content = await audio.read()
            buffer.write(content)
            # ƒê·∫∑t l·∫°i con tr·ªè file ƒë·ªÉ c√≥ th·ªÉ ƒë·ªçc l·∫°i n·∫øu c·∫ßn
            await audio.seek(0)
        
        print(f"üíæ ƒê√£ l∆∞u file: {os.path.getsize(original_path)} bytes")
        
        # Validate file
        is_valid, message = validate_audio_file(original_path)
        if not is_valid:
            raise HTTPException(status_code=400, detail=f"File audio kh√¥ng h·ª£p l·ªá: {message}")
        
        print(f"‚úÖ {message}")
        
        # Chuy·ªÉn ƒë·ªïi sang WAV
        wav_path = os.path.join(temp_dir, "converted.wav")
        if not convert_audio_to_wav(original_path, wav_path):
            raise HTTPException(status_code=500, detail="Kh√¥ng th·ªÉ chuy·ªÉn ƒë·ªïi audio")
        
        print(f"üîÑ ƒê√£ chuy·ªÉn ƒë·ªïi sang WAV: {os.path.getsize(wav_path)} bytes")

        # X·ª≠ l√Ω theo provider
        if not selected_provider:
            # LOCAL MODE
            audio_info = AudioSegment.from_wav(wav_path)
            duration = len(audio_info) / 1000.0
            
            summary = f"""üìä Ph√¢n t√≠ch cu·ªôc h·ªçp (Ch·∫ø ƒë·ªô Offline)

‚è±Ô∏è Th√¥ng tin audio:
- Th·ªùi l∆∞·ª£ng: {duration:.2f} gi√¢y  
- K√≠ch th∆∞·ªõc: {os.path.getsize(wav_path)} bytes
- ƒê·ªãnh d·∫°ng: WAV, 16kHz, Mono

üí° K·∫øt qu·∫£:
Audio ƒë√£ ƒë∆∞·ª£c ghi v√† x·ª≠ l√Ω th√†nh c√¥ng trong ch·∫ø ƒë·ªô offline.

üîß ƒê·ªÉ s·ª≠ d·ª•ng AI mi·ªÖn ph√≠:
1. GROQ API (MI·ªÑN PH√ç): ƒêƒÉng k√Ω t·∫°i https://console.groq.com
2. HuggingFace (MI·ªÑN PH√ç): T·∫°o token t·∫°i https://huggingface.co/settings/tokens  
3. Together AI ($5 credit): https://api.together.xyz
4. DeepSeek (R·∫•t r·∫ª): https://platform.deepseek.com

Thi·∫øt l·∫≠p bi·∫øn m√¥i tr∆∞·ªùng:
- GROQ_API_KEY=your_groq_key
- HUGGINGFACE_API_KEY=your_hf_token
- TOGETHER_API_KEY=your_together_key
- DEEPSEEK_API_KEY=your_deepseek_key

üéâ H·ªá th·ªëng ghi √¢m ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng!"""
            
        else:
            # ONLINE MODE v·ªõi Free APIs
            api_key = os.getenv(FREE_PROVIDERS[selected_provider]["api_key_env"])
            
            # Step 1: Transcribe audio
            print("üéôÔ∏è ƒêang chuy·ªÉn ƒë·ªïi audio sang text...")
            transcript = None
            
            if selected_provider == "groq":
                transcript = transcribe_with_groq(wav_path, api_key)
            elif selected_provider == "huggingface":
                transcript = transcribe_with_huggingface(wav_path, api_key)
            # Together v√† DeepSeek c√≥ th·ªÉ kh√¥ng c√≥ Whisper, fallback v·ªÅ Groq ho·∫∑c HF
            
            if not transcript:
                raise HTTPException(
                    status_code=500, 
                    detail="Kh√¥ng th·ªÉ chuy·ªÉn ƒë·ªïi audio sang text. Ki·ªÉm tra API key ho·∫∑c th·ª≠ l·∫°i."
                )
            
            print(f"üìù Transcript: {len(transcript)} k√Ω t·ª±")
            print(f"üìù N·ªôi dung: {transcript[:200]}...")
            
            if len(transcript.strip()) < 10:
                summary = f"""üìä K·∫øt qu·∫£ ph√¢n t√≠ch cu·ªôc h·ªçp

‚ö†Ô∏è C·∫£nh b√°o: Transcript qu√° ng·∫Øn ho·∫∑c kh√¥ng r√µ r√†ng

üìù N·ªôi dung nh·∫≠n di·ªán: "{transcript}"

üí° G·ª£i √Ω c·∫£i thi·ªán:
- Ki·ªÉm tra microphone ho·∫°t ƒë·ªông t·ªët
- N√≥i to v√† r√µ r√†ng h∆°n  
- Ghi √¢m trong m√¥i tr∆∞·ªùng √≠t ti·∫øng ·ªìn
- ƒê·∫£m b·∫£o k·∫øt n·ªëi internet ·ªïn ƒë·ªãnh

üîß Provider ƒëang d√πng: {FREE_PROVIDERS[selected_provider]['name']}"""
            else:
                # Step 2: Analyze v·ªõi AI
                print("üß† ƒêang ph√¢n t√≠ch n·ªôi dung...")
                analysis = None
                
                if selected_provider == "groq":
                    analysis = analyze_with_groq(transcript, api_key)
                elif selected_provider == "huggingface":
                    analysis = analyze_with_huggingface(transcript, api_key)
                elif selected_provider == "deepseek":
                    analysis = analyze_with_deepseek(transcript, api_key)
                # C√≥ th·ªÉ th√™m c√°c provider kh√°c
                
                if analysis:
                    summary = f"""üéØ S·ª≠ d·ª•ng {FREE_PROVIDERS[selected_provider]['name']}

{analysis}

---
üìù Transcript g·ªëc:
{transcript}

‚úÖ Ph√¢n t√≠ch ho√†n th√†nh b·∫±ng AI mi·ªÖn ph√≠!"""
                else:
                    summary = f"""üìä K·∫øt qu·∫£ chuy·ªÉn ƒë·ªïi audio

üìù N·ªôi dung cu·ªôc h·ªçp:
{transcript}

‚ö†Ô∏è L∆∞u √Ω: Ch·ªâ th·ª±c hi·ªán chuy·ªÉn ƒë·ªïi audio sang text.
Ph√¢n t√≠ch AI g·∫∑p l·ªói, vui l√≤ng th·ª≠ l·∫°i.

üîß Provider: {FREE_PROVIDERS[selected_provider]['name']}"""

        print("‚úÖ Tr·∫£ v·ªÅ k·∫øt qu·∫£ th√†nh c√¥ng")
        return {"summary": summary}

    except Exception as e:
        print(f"‚ùå L·ªói t·ªïng qu√°t: {str(e)}")
        raise HTTPException(status_code=500, detail=f"L·ªói x·ª≠ l√Ω: {str(e)}")
        
    finally:
        if temp_dir and os.path.exists(temp_dir):
            try:
                shutil.rmtree(temp_dir, ignore_errors=True)
                print("üóëÔ∏è ƒê√£ x√≥a th∆∞ m·ª•c t·∫°m")
            except:
                pass

@router.get('/health')
async def health_check():
    """Endpoint ki·ªÉm tra tr·∫°ng th√°i server"""
    available_providers = []
    for name, config in FREE_PROVIDERS.items():
        api_key = os.getenv(config["api_key_env"])
        if api_key:
            available_providers.append({
                "name": name,
                "display_name": config["name"],
                "status": "available"
            })
    
    status = {
        "status": "healthy",
        "mode": "online" if selected_provider else "local",
        "current_provider": selected_provider,
        "available_providers": available_providers,
        "setup_guide": {
            "groq": "Mi·ªÖn ph√≠ t·∫°i https://console.groq.com",
            "huggingface": "Mi·ªÖn ph√≠ t·∫°i https://huggingface.co/settings/tokens",
            "together": "$5 credit t·∫°i https://api.together.xyz", 
            "deepseek": "R·∫•t r·∫ª t·∫°i https://platform.deepseek.com"
        }
    }
    return status

@router.get('/providers')
async def list_providers():
    """Li·ªát k√™ c√°c provider AI mi·ªÖn ph√≠"""
    providers_info = []
    for name, config in FREE_PROVIDERS.items():
        api_key = os.getenv(config["api_key_env"])
        providers_info.append({
            "name": name,
            "display_name": config["name"],
            "status": "configured" if api_key else "not_configured",
            "env_var": config["api_key_env"],
            "features": {
                "whisper": "whisper_url" in config,
                "chat": "chat_url" in config
            }
        })
    
    return {
        "providers": providers_info,
        "current": selected_provider,
        "instructions": {
            "groq": {
                "url": "https://console.groq.com",
                "description": "Ho√†n to√†n mi·ªÖn ph√≠, r·∫•t nhanh, h·ªó tr·ª£ Whisper + Llama",
                "setup": "1. ƒêƒÉng k√Ω t√†i kho·∫£n\n2. T·∫°o API key\n3. Set GROQ_API_KEY=your_key"
            },
            "huggingface": {
                "url": "https://huggingface.co/settings/tokens",
                "description": "Mi·ªÖn ph√≠ nh∆∞ng c√≥ gi·ªõi h·∫°n t·ªëc ƒë·ªô",
                "setup": "1. T·∫°o t√†i kho·∫£n HF\n2. T·∫°o Access Token\n3. Set HUGGINGFACE_API_KEY=your_token"
            },
            "together": {
                "url": "https://api.together.xyz",
                "description": "$5 credit mi·ªÖn ph√≠ khi ƒëƒÉng k√Ω",
                "setup": "1. ƒêƒÉng k√Ω v√† nh·∫≠n $5\n2. T·∫°o API key\n3. Set TOGETHER_API_KEY=your_key"
            },
            "deepseek": {
                "url": "https://platform.deepseek.com",
                "description": "R·∫•t r·∫ª, ch·∫•t l∆∞·ª£ng cao (~$0.001/1000 tokens)",
                "setup": "1. ƒêƒÉng k√Ω t√†i kho·∫£n\n2. N·∫°p √≠t ti·ªÅn ($1-5)\n3. Set DEEPSEEK_API_KEY=your_key"
            }
        }
    }

# Kh√¥ng c·∫ßn ph·∫ßn if __name__ == "__main__" v√¨ ƒë√¢y l√† router, kh√¥ng ph·∫£i ·ª©ng d·ª•ng ch√≠nh
